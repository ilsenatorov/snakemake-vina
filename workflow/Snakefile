import os


configfile: "config/config.yaml"


resources = os.path.join(os.getcwd(), config["resources"])
results = os.path.join(os.getcwd(), config["results"])

receptor_dir = os.path.join(resources, "receptors")
ligand_dir = os.path.join(resources, "ligands")

receptors = [x.split(".")[0] for x in os.listdir(receptor_dir) if x.endswith(".pdb")]
ligands = [x.split(".")[0] for x in os.listdir(ligand_dir) if x.endswith(".smi")]


rule all:
    input:
        expand("{results}/run_qvina/{receptor}_{ligand}.pdb", results=results, receptor=receptors, ligand=ligands),


rule prepare_receptors:
    input:
        f"{resources}/receptors/{{receptor}}.pdb",
    output:
        f"{results}/prepare_receptors/{{receptor}}.pdbqt",
    conda:
        "envs/mgltools.yml"
    shell:
        "prepare_receptor4.py -r {input} -o {output}"


rule smiles_to_pdb:
    input:
        f"{resources}/ligands/{{ligand}}.smi",
    output:
        f"{results}/smiles_to_pdb/{{ligand}}.pdb",
    shell:
        "obabel -ismi {input} -opdb -O {output} --gen3D"


rule prepare_ligands:
    input:
        rules.smiles_to_pdb.output,
    output:
        f"{results}/prepare_ligands/{{ligand}}.pdbqt",
    conda:
        "envs/mgltools.yml"
    message:
        "Preparing ligand {input}"
    shell:
        f"cd {results}/smiles_to_pdb;prepare_ligand4.py -l {{input}} -o {{output}}"


rule run_qvina:
    input:
        receptor=rules.prepare_receptors.output,
        ligand=rules.prepare_ligands.output,
    output:
        f"{results}/run_qvina/{{receptor}}_{{ligand}}.pdb",
    log:
        f"{results}/run_qvina_log/{{receptor}}_{{ligand}}.txt",
    shell:
        """{config[vina][path]} --receptor {input.receptor} --ligand {input.ligand} \
        --exhaustiveness {config[vina][exhaustiveness]} \
        --out {output} --config config/config.txt \
        --log {log} > /dev/null 2>&1"""
